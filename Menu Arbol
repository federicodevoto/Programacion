#include <stdio.h>
#include <stdlib.h>
#define CLAVE_DUPLICADA 0
#define SIN_MEMORIA 0
#define TODO_BIEN 1

//**********ESTRUCTURAS**********//
typedef struct
{
    int num;
}t_dato;

typedef struct s_nodo
{
    struct s_nodo *izq;
    t_dato dato;
    struct s_nodo *der;
}t_nodo;

typedef t_nodo* t_arbol;

//***********PROTOTIPOS**********//
void crearArbol(t_arbol*);
void abrirArchivo(FILE**,char*);
void preOrden(t_arbol*);
void posOrden(t_arbol*);
void inOrden(t_arbol*);
void ingresarDato(t_dato*);
int cargarArbolR(t_arbol*,t_dato*);
void cargarArbolDesdeArchivo(FILE*,t_arbol*);
int comparar(t_dato*, t_dato*);
void guardarArchivoPre(FILE*,t_arbol*);
int contarNodos(t_arbol*);
int mostraryContarHojas(t_arbol*);
int mostraryContarNoHojas(t_arbol*);
int mostraryContarNodosHijosIzquierda(t_arbol*);
int mostraryContarNodosSoloHijosIzquierda(t_arbol*);
int contarNodosClavePar(t_arbol*);
t_arbol buscarClave(t_arbol*,int);
int contarNodosAPartirdeClave(t_arbol*,int);
void sumarHojas(t_arbol*, int*);
int alturaArbol(t_arbol*);


//**********MAIN**********//
void main()
{
    t_dato dato;
    t_arbol raiz, dir;
    FILE *pf;
    int opc,clave,cont;
    float promedio;
    printf("\n*****MENU ARBOL*****\n\
1- Crear arbol\n\
2- Cargar arbol\n\
3- Mostrar arbol\n\
4- Guardar en archivo\n\
5- Cargar arbol desde archivo\n\
6- Contar nodos\n\
7- Mostrar y contar hojas del arbol\n\
8- Contar hojas del subarbol derecho\n\
9- Mostrar y contar NO hojas del arbol\n\
10- Mostrar nodos con hijos por izquierda\n\
11- Mostrar nodos con hijos solo por izquierda\n\
12- Contar nodos con clave par\n\
13- Buscar nodo por clave\n\
14- Contar nodos a partir de una clave dada\n\
15- Promedio hojas\n\
16- Altura del arbol\n\
\n\nIngrese una opcion: ");
    scanf("%d",&opc);
    while(opc)
    {
        switch(opc)
        {
        case 1:
            crearArbol(&raiz);
            printf("\nSe creo el arbol");
        break;

        case 2:
            ingresarDato(&dato);
            while(dato.num!=0)
            {
                if(cargarArbolR(&raiz,&dato))
                    printf("\nSe cargo el dato");
                else
                    printf("\nError de carga");
                ingresarDato(&dato);
            }
        break;

        case 3:
            printf("\nArbol recorrido en preorden\n");
            preOrden(&raiz);

            printf("\nArbol recorrido inorden\n");
            inOrden(&raiz);

            printf("\nArbol recorrido en posorden\n");
            posOrden(&raiz);
        break;

        case 4:
            abrirArchivo(&pf,"wb");
            guardarArchivoPre(pf,&raiz);
            printf("\nSe guardo el arbol en el archivo");
            fclose(pf);
        break;

        case 5:
            crearArbol(&raiz);
            abrirArchivo(&pf,"rb");
            cargarArbolDesdeArchivo(pf,&raiz);
            printf("\nSe cargo el arbol desde archivo");
            fclose(pf);
        break;

        case 6:
            printf("Cantidad de nodos: %d",contarNodos(&raiz));
        break;

        case 7:
            printf("\nHojas: ");
            printf("\nCantidad de hojas del arbol %d",mostraryContarHojas(&raiz));
        break;

        case 8:
            if(raiz->der)
                printf("\nCantidad de hojas del subarbol derecho %d",mostraryContarHojas(&(*raiz).der));
            else
                printf("\nNo hay subarbol derecho");
        break;

        case 9:
            printf("\nHojas: ");
            printf("\nCantidad de hojas del arbol %d",mostraryContarNoHojas(&raiz));
        break;

        case 10:
            printf("\nNodos con hijos por izquierda\n");
            printf("\nCantidad: %d",mostraryContarNodosHijosIzquierda(&raiz));
        break;

        case 11:
            printf("\nNodos con hijos solo por izquierda\n");
            printf("\nCantidad: %d",mostraryContarNodosSoloHijosIzquierda(&raiz));
        break;

        case 12:
            printf("\nCantidad de nodos con clave par: %d",contarNodosClavePar(&raiz));
        break;

        case 13:
            printf("\nIngrese clave: ");
            scanf("%d",&clave);
            dir=buscarClave(&raiz,clave);
            if(dir)
            {
                printf("\nLa clave esta en la posicion %p de memoria",dir);
                printf("\nContenido: %d",dir->dato.num);
            }
            else
                printf("\nClave no encontrada");
        break;

        case 14:
            printf("\nIngrese la clave: ");
            scanf("%d",&clave);
            printf("\nCantidad de nodos a partir de la clave %d: %d",clave,contarNodosAPartirdeClave(&raiz,clave));
        break;

        case 15:
            cont=0;
            sumarHojas(&raiz,&cont);
            promedio=(float)cont/mostraryContarHojas(&raiz);
            printf("\nEl promedio de las hojas es: %.2f",promedio);
        break;

        case 16:
            printf("\nLa altura del arbol es %d",alturaArbol(&raiz));
        break;
        }
        printf("\n\n*****MENU ARBOL*****\n\
1- Crear arbol\n\
2- Cargar arbol\n\
3- Mostrar arbol\n\
4- Guardar en archivo\n\
5- Cargar arbol desde archivo\n\
6- Contar nodos\n\
7- Mostrar y contar hojas del arbol\n\
8- Contar hojas del subarbol derecho\n\
9- Mostrar y contar NO hojas del arbol\n\
10- Mostrar nodos con hijos por izquierda\n\
11- Mostrar nodos con hijos solo por izquierda\n\
12- Contar nodos con clave par\n\
13- Buscar nodo por clave\n\
14- Contar nodos a partir de una clave dada\n\
15- Promedio hojas\n\
16- Altura del arbol\n\
\n\nIngrese una opcion: ");
    scanf("%d",&opc);
    }
}

//**********FUNCIONES**********//
void crearArbol(t_arbol *pa)
{
    *pa=NULL;
}

void abrirArchivo(FILE **file,char *modo)
{
    *file=fopen("C:\\ArchProII\\Arbol.dat",modo);
    if(!file)
    {
        printf("NO SE PUDO ABRIR EL ARCHIVO\n");
        exit(1);
    }
}

void preOrden(t_arbol *pa)
{
    if(*pa)
    {
        printf("%d ",(*pa)->dato.num);
        if((*pa)->izq) //PRESCINDIBLE
            preOrden(&(*pa)->izq);
        if((*pa)->der) //PRESCINDIBLE
            preOrden(&(*pa)->der);
    }
}

void posOrden(t_arbol *pa)
{
    if(*pa)
    {
        if((*pa)->izq)
            posOrden(&(*pa)->izq);
        if((*pa)->der)
            posOrden(&(*pa)->der);
        printf("%d ",(*pa)->dato.num);
    }
}

void inOrden(t_arbol *pa)
{
    if(*pa)
    {
        if((*pa)->izq)
            inOrden(&(*pa)->izq);
        printf("%d ",(*pa)->dato.num);
        if((*pa)->der)
            inOrden(&(*pa)->der);
    }
}

void ingresarDato(t_dato *d)
{
    printf("\nIngrese el dato: ");
    scanf("%d",&d->num);
}

int cargarArbolR(t_arbol *pa,t_dato *d)
{
    int cmp;
    if(*pa)
    {
        cmp=comparar(d,&(*pa)->dato);
        if(cmp==0)
            return CLAVE_DUPLICADA;
        if(cmp<0)
            cargarArbolR(&(*pa)->izq,d);
        else
            cargarArbolR(&(*pa)->der,d);
    }
    else // si encontre NULL
    {
        *pa=(t_nodo*)malloc(sizeof(t_nodo));
        if(!*pa)
            return SIN_MEMORIA;
        (*pa)->izq=(*pa)->der=NULL;
        (*pa)->dato=*d;
        return TODO_BIEN;
    }
}

void cargarArbolDesdeArchivo(FILE *pf,t_arbol *pa)
{
    t_dato reg;
    fread(&reg,sizeof(t_dato),1,pf);
    while(!feof(pf))
    {
        cargarArbolR(pa,&reg);
        fread(&reg,sizeof(t_dato),1,pf);
    }
}

int comparar(t_dato *d1,t_dato *d2)
{
    return (d1->num)-(d2->num);
}

void guardarArchivoPre(FILE *file,t_arbol *pa)
{
    if(*pa)
    {
        fwrite(&(*pa)->dato,sizeof(t_dato),1,file);
        if((*pa)->izq)
            guardarArchivoPre(file,&(*pa)->izq);
        if((*pa)->der)
            guardarArchivoPre(file,&(*pa)->der);
    }
}

int contarNodos(t_arbol *pa)
{
    if(*pa)
        return 1+contarNodos(&(*pa)->izq)+contarNodos(&(*pa)->der);
    else
        return 0;
}

int mostraryContarHojas(t_arbol *pa)
{
    if(*pa)
    {
        if((*pa)->izq==NULL && (*pa)->der==NULL)
        {
            printf("%d ",(*pa)->dato.num);
            return 1;
        }
        return mostraryContarHojas(&(*pa)->izq)+mostraryContarHojas(&(*pa)->der);
    }
    return 0;
}

int mostraryContarNoHojas(t_arbol *pa)
{
    if(*pa)
    {
        if((*pa)->izq!=NULL || (*pa)->der!=NULL)
        {
            printf("%d ",(*pa)->dato.num);
            return 1+mostraryContarNoHojas(&(*pa)->izq)+mostraryContarNoHojas(&(*pa)->der);
        }
    }
    return 0;
}

int mostraryContarNodosHijosIzquierda(t_arbol *pa)
{
    if(*pa)
    {
        if((*pa)->izq!=NULL)
        {
            printf("%d ",(*pa)->dato.num);
            return 1+mostraryContarNodosHijosIzquierda(&(*pa)->izq)+mostraryContarNodosHijosIzquierda(&(*pa)->der);
        }
        return mostraryContarNodosHijosIzquierda(&(*pa)->izq)+mostraryContarNodosHijosIzquierda(&(*pa)->der);
    }
    return 0;
}

int mostraryContarNodosSoloHijosIzquierda(t_arbol *pa)
{
    if(*pa)
    {
        if((*pa)->izq!=NULL && (*pa)->der==NULL)
        {
            printf("%d ",(*pa)->dato.num);
            return 1+mostraryContarNodosSoloHijosIzquierda(&(*pa)->izq);
        }
        return mostraryContarNodosSoloHijosIzquierda(&(*pa)->izq)+mostraryContarNodosSoloHijosIzquierda(&(*pa)->der);
    }
    return 0;
}

int contarNodosClavePar(t_arbol *pa)
{
    if(*pa)
        {
            if((*pa)->dato.num%2==0)
            {
                printf("%d ",(*pa)->dato.num);
                return 1+contarNodosClavePar(&(*pa)->izq)+contarNodosClavePar(&(*pa)->der);
            }
        return contarNodosClavePar(&(*pa)->izq)+contarNodosClavePar(&(*pa)->der);
        }
    return 0;
}

t_arbol buscarClave(t_arbol *pa,int cla)
{
    int cmp;
    if(*pa)
    {
        cmp=cla-((*pa)->dato.num);
        if(cmp==0)
            return (*pa);
        if(cmp<0)
            buscarClave(&(*pa)->izq,cla);
        else
            buscarClave(&(*pa)->der,cla);
    }
    else
        return NULL;
}

int contarNodosAPartirdeClave(t_arbol *pa,int cla)
{
    t_arbol aux;
    aux=buscarClave(pa,cla);
    return contarNodos(&aux);
}

void sumarHojas(t_arbol *pa,int *cont)
{
    if(*pa)
    {
        if((*pa)->izq==NULL && (*pa)->der==NULL)
            *cont+=(*pa)->dato.num;
        sumarHojas(&(*pa)->izq,cont);
        sumarHojas(&(*pa)->der,cont);
    }
}

int alturaArbol(t_arbol *pa)
{
    int hd, hi;
    if(*pa)
    {
        hd=alturaArbol(&(*pa)->der);
        hi=alturaArbol(&(*pa)->izq);
        return (hd>hi)?hd+1:hi+1;
    }
    return 0;
}

