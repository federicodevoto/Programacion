#include<conio.h>
#include<stdio.h>
#include<stdlib.h>
#define SIN_MEMORIA 0
#define TODO_OK 1
#define NO_ENCONTRADO 0

//Estructuras//
typedef struct
{
    int  clave;
    float importe;      //Estructura DATOS

}t_dato;

typedef struct s_nodo
{
    t_dato dato;
    struct s_nodo *sig;
}t_nodo;

typedef t_nodo* t_lista;


//Prototipos Funciones//

int insertar_en_orden(t_lista*,t_dato*);
int eliminar_dato_OSR(t_lista*,t_dato*);// Lista ordenada, No hay repetidos
int eliminar_dato_OCR(t_lista*,t_dato*);// Lista ordenada, elimino todos los repetidos.
int eliminar_dato_OCR_dejando_suma(t_lista*,t_dato*); //Lista ordenada con repetidos. Elimino los repetidos, pero dejo uno con la suma de los anteriores.
void eliminar_repetidos_OCR(t_lista*);// Lista ordenada con repetidos, borro todos los repetidos sin clave.
int eliminar_dato_DSR(t_lista*,t_dato*);//Lista desordenada sin repetidos.



//MAIN//

//Funciones//
int insertar_en_orden(t_lista*p,t_dato*d)
{
    t_nodo*nue;

    while(*p&&comparar(&(*p)->dato,d)<0)
            p=&(*p)->sig;

    if(*p && !comparar(&(*p)->dato,d))
        //Tratar Duplicados

    nue=(t_nodo*) malloc(sizeof(t_nodo));
    if(!nue)
        return SIN_MEMORIA; //no pude reservar

    nue->dato=*d;
    nue->sig=*p;
    *p=nue;

    return TODO_OK; //Lo agrega.
}

int eliminar_dato_OSR(t_lista*p,t_dato*d)
{
    t_nodo* aux;

    while(*p && comparar(&(*p)->dato,d)<0)
        p=&(*p)->sig; // me muevo


    if(!*p || comparar(&(*p)->dato,d)>0)

        return NO_ENCONTRADO;

        aux=*p;
        *p=aux->sig;    // Hace enganche
        *d=aux->dato    // Devuelvo dato
        free(aux);      // Libero memoria
        return TODO_OK; //lo encuentra y borra while(*p && comparar(&(*p)->dato,d)<0)
            p=&(*p)->sig; // me muevo

}

int eliminar_dato_OCR(t_lista*p,t_dato*d)
{
    t_nodo*aux;
    int cont=0;

    while(*p && comparar(&(*p)->dato,d)<0)
            p=&(*p)->sig; // me muevo

    while(*p && comparar(&(*p)->dato,d)==0)
        {
            aux=*p;
            *p=aux->sig;// Hace enganche
            free(aux);      // Libero memoria
            cont++;
        }

    return cont;

}

int eliminar_dato_OCR_dejando_suma(t_lista*p,t_dato*d)
{
    t_nodo*aux,*pos; //aux para liberar. Pos para el primero.
    int c=0;

     while(*p && comparar(&(*p)->dato,d)<0)
            p=&(*p)->sig; // me muevo

     if(*p)
     {
        pos=*p; //guardo el primero
        p=&(*p)->sig;
     }

     while(*p && comparar(&(*p)->dato,d)==0)
    {
        aux=*p;
        *p=aux->sig;// Hace enganche
        pos->dato.importe+=aux->dato.importe;//acumulo
        free(aux);      // Libero memoria
        cont++;
    }

    return cont;
}


void eliminar_repetidos_OCR(t_lista*p)
{
    int clave; // para guardar
    t_nodo*aux; // para liberar

    while(*p)
    {
        clave=(*p)->dato.clave; // guardo dato
        p=&(*p)->sig; //avanzo

        while(*p && comparar(&(*p)->dato,&clave)==0)
        {
            aux=*p;
            *p=aux->sig;// Hace enganche
            free(aux);      // Libero memoria
        }

    }

}


int eliminar_dato_DSR(t_lista*p,t_dato*d)
{
    t_nodo* aux;

    while(*p && comparar(&(*p)->dato,d)!=0)
       p=&(*p)->sig; // me muevo

    if(!*p)
        return NO_ENCONTRADO;

    aux=*p;
    *p=aux->sig;    // Hace enganche
    *d=aux->dato    // Devuelvo dato
    free(aux);      // Libero memoria

        return TODO_OK; //lo encuentra y borra
}


